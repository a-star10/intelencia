#!/usr/bin/env python3
"""
Script d'import des √©quivalences dipl√¥mes par d√©faut
Ex√©cuter : python import_equivalences.py
"""
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from core.database import db_manager

def get_default_equivalences():
    """R√©cup√©rer les √©quivalences par d√©faut"""
    
    return [
        ("C.M.E", "C.T.E"),
        ("C.M.1", "C.T.1"),
        ("C.M.2", "C.T.2"),
        ("B.M.P.1", "B.M.P.2"),
    ]

def import_equivalences():
    """Importer les √©quivalences par d√©faut"""
    print("üöÄ Import des √©quivalences dipl√¥mes par d√©faut...")
    print()
    
    equivalences = get_default_equivalences()
    
    print(f"üìã {len(equivalences)} √©quivalence(s) √† importer")
    print()
    
    # V√©rifier si des √©quivalences existent d√©j√†
    existing = db_manager.get_all_equivalences()
    if existing:
        print(f"‚ö†Ô∏è  {len(existing)} √©quivalence(s) existe(nt) d√©j√†")
        response = input("Voulez-vous continuer et ajouter les nouvelles ? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Import annul√©")
            return
    
    # Importer chaque √©quivalence
    success_count = 0
    skip_count = 0
    
    for diplome_principal, diplome_equivalent in equivalences:
        # V√©rifier si existe d√©j√†
        existing_equiv = db_manager.get_equivalence(diplome_principal, diplome_equivalent)
        
        if existing_equiv:
            print(f"‚è≠Ô∏è  {diplome_principal} ‚ÜîÔ∏è {diplome_equivalent} (existe d√©j√†)")
            skip_count += 1
            continue
        
        try:
            equiv_id = db_manager.create_equivalence(diplome_principal, diplome_equivalent)
            if equiv_id:
                success_count += 1
                print(f"‚úÖ {diplome_principal} ‚ÜîÔ∏è {diplome_equivalent}")
            else:
                print(f"‚ùå Erreur: {diplome_principal} ‚ÜîÔ∏è {diplome_equivalent}")
        except Exception as e:
            print(f"‚ùå Exception: {e}")
    
    print()
    print("=" * 60)
    print(f"‚úÖ Import termin√© !")
    print(f"üìä R√©sultats:")
    print(f"   - √âquivalences import√©es: {success_count}")
    print(f"   - D√©j√† existantes: {skip_count}")
    print(f"   - Total en base: {len(db_manager.get_all_equivalences())} √©quivalence(s)")
    print()
    print("üéØ Vous pouvez maintenant visualiser et g√©rer les √©quivalences dans l'application !")

if __name__ == "__main__":
    try:
        import_equivalences()
    except KeyboardInterrupt:
        print("\n‚ùå Import interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'import: {e}")